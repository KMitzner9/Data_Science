xlab = "Rating",
ylab = "Box Office ($M)")
#bivariate box plot
bwplot(
x = Box.Office ~ Rating,
data = average,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#Bivariate Bar Chart
barchart(
x = Box.Office ~ Rating,
data = average,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#bivariate box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#notched box plot
barchart(
x = Box.Office ~ Rating,
data = movies,
notch = TRUE,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#notched box plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
notch = TRUE,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#violin plot
bwplot(
x = Box.Office ~ Rating,
data = movies,
panel = panel.violin,
main = "Box Office Revenue by Rating",
xlab = "Rating",
ylab = "Box Office ($M)")
#Bivariate bar chart
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_bar(stat = "identity") +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Revenue ($M)")
#Bivariate box plot
ggplot(
data = average,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Revenue ($M)")
#Bivariate box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Revenue ($M)")
#notched box plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_boxplot(notch = TRUE) +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Revenue ($M)")
#Violin plot
ggplot(
data = movies,
aes(x = Rating, y = Box.Office)) +
geom_violin() +
ggtitle("Average Box Office Revenue by Rating") +
xlab("Rating") +
ylab("Revenue ($M)")
#frequency bar chart with defaults
plot(movies$Rating)
#frequency bar chart with defaults
plot(factor(movies$Rating))
#add context
plot(
x = factor(movies$Rating),
main = "Count of Movies by MPAA Rating Category",
xlab = "Rating",
ylab = "Count of Movies")
#Create a color palette
library(RColorBrewer)
palette <- brewer.pal(9, "Pastel1")
palette
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[3],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[5],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[1],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[6],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[3],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[4],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#clean up the bar chart
plot(
x = factor(movies$Rating),
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
#make sure to check for information distortion
#save file as PNG
png(
filename = "Movies_by_Rating.png",
width = 640,
height = 480)
plot(
x = factor(movies$Rating),
col = palette[2],
border = NA,
main = "Count of Movies by MPAA Rating Category",
xlab = "MPAA Rating Category",
ylab = "Count of Movies")
dev.off()
?ggsave
runExample("01_hello")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("01_hello")
setwd("~/GitHub/Data_Science/R_Projects/shinyApps")
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('App-1')
runApp('App-1')
runApp('App-1')
h2("My Title")
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('census-app')
runApp('census-app', display.mode = "showcase")
runApp('census-app')
runApp('census-app')
runApp('census-app')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
install.packages(quantmod)
install.packages("quantmod")
runApp("stockVis")
setwd("~/GitHub/Data_Science/R_Projects/shinyApps/census-app")
runApp("stockVis")
setwd("~/GitHub/Data_Science/R_Projects/shinyApps")
runApp("stockVis")
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
runApp('stockVis')
setwd("~/GitHub/Data_Science/R_Projects")
read.csv("Iris.csv")
iris <- read.csv("Iris.csv")
data(iris)
head(iris)
?data
unique(iris$Species)
#creating a data frame
df <- data.frame(
Name = c("cat", "dog", "cow", "pig"),
HowMany = c(5, 10, 15, 20),
IsPet = c(TRUE, TRUE, FALSE, FALSE))
df
#indexing by row and column
df[1, 2]
#by row
df[1,]
#by column
df[,2]
#double brackets for column name
df[["Name"]]
df$Name
#subsetting dataframes
df[c(2, 4),]
#inspect the different species
unique(iris$Species)
#Linear Regression Analysis
data(iris)
head(iris)
#look at unique species
unique(iris$Species)
#create scatterplot matrix
plot(iris[1:4])
str(iris)
type(iris)
class(iris)
#create tables for each species
setosa <- data.frame(iris$Species == "Setosa")
setosa(head)
head(setosa)
#create tables for each species
setosa <- data.frame[iris$Species == "Setosa", ]
#create tables for each species
setosa <- data.frame["Setosa", ]
s
#create tables for each species
setosa <- iris["Setosa", ]
head(setosa)
#create tables for each species
setosa <- iris[iris$Species == "setosa", ]
head(setosa)
source('~/GitHub/Data_Science/R_Projects/iris_shiny_scratch.R', echo=TRUE)
#inspect the different species
unique(iris$Species)
#create tables for each species
setosa <- iris[iris$Species == "setosa"]
head(setosa)
versicolor <- iris[iris$Species == "versicolor"]
head(iris)
#inspect the different species
unique(iris$Species)
versicolor <- iris[iris$Species == "versicolor"]
versicolor <- iris[iris$Species == "versicolor",]
head(versicolor)
#create tables for each species
setosa <- iris[iris$Species == "setosa"]
#create tables for each species
setosa <- iris[iris$Species == "setosa",]
head(setosa)
versicolor <- iris[iris$Species == "versicolor",]
head(versicolor)
virginica <- iris[iris$Species == "virginica", ]
#create some scatter plots to view sepal length vs width and petal LxW
plot(
x = setosa$Sepal.Length,
y = setosa$Sepal.Width,
main = "Setosa: Sepal Length vs Sepal Width",
xlab = "Sepal Length",
ylab = "Sepal Width")
#create scatter plot with species differentiated by color
plot(
x = iris[1:4],
col = as.integer(iris$Species))
#view scatterplot of petal length vs width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species)
)
#create k-means clusters
clusters <- kmeans(
x = iris[, 1:4],
centers = 3,     #number of clusters is already known here
nstart = 10)     #restarts 10 times
#plot each cluster as a shape
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
col = as.numeric(iris$Species),
pch = clusters$cluster      #this plots a dif shape for the predicted values
)
#draw regression line
model <- lm(setosa$Sepal.Width ~ setosa$Sepal.Length)
#create some scatter plots to view sepal length vs width and petal LxW
plot(
x = setosa$Sepal.Length,
y = setosa$Sepal.Width,
main = "Setosa: Sepal Length vs Sepal Width",
xlab = "Sepal Length",
ylab = "Sepal Width")
#draw regression line
model <- lm(setosa$Sepal.Width ~ setosa$Sepal.Length)
lines(
x = setosa$Sepal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#petal length vs width
#create some scatter plots to view sepal length vs width and petal LxW
plot(
x = setosa$Petal.Length,
y = setosa$Petal.Width,
main = "Setosa: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
#draw regression line
model <- lm(setosa$Petal.Width ~ setosa$Petal.Length)
lines(
x = setosa$Petal.Length,
y = model$fitted,
col = "red",
lwd = 3)
#create scatter plot of petal length and petal width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
library(shiny)
iris <- read.csv("Iris.csv")
runApp('shinyApps/iris-app')
runApp('shinyApps/iris-app')
setwd("~/GitHub/Data_Science/R_Projects/shinyApps/iris-app")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/Data_Science/R_Projects/shinyApps/iris-app")
library(shiny)
iris <- read.csv("data/Iris.csv")
runApp()
setwd("~/GitHub/Data_Science/R_Projects/shinyApps/census-app")
runApp()
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
library(shiny)
library(datasets)
iris <- data(iris)
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
head(iris)
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
plot(
x = setosa$Sepal.Length,
y = setosa$Sepal.Width,
main = "Setosa: Sepal Length vs Sepal Width",
xlab = "Sepal Length",
ylab = "Sepal Width")
?plot
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
library(lattice)
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
#petal length vs width
#create some scatter plots to view sepal length vs width and petal LxW
plot(
x = iris[iris$Species == "setosa",]$Petal.Length,
y = iris[iris$Species == "setosa",]$Petal.Width,
main = "Setosa: Petal Length vs Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
traceback()
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
traceback()
#source("helpers.R")
#setosa <- iris[iris$Species == "setosa",]
#versicolor <- iris[iris$Species == "versicolor",]
#virginica <- iris[iris$Species == "virginica", ]
head(iris)
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
virginica <- iris[iris$Species == "virginica", ]
head(virginica)
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
runApp('~/GitHub/Data_Science/R_Projects/shinyApps/iris-app')
