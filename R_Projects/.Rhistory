setwd("~/GitHub/Data_Science/R_Projects")
source('~/GitHub/Data_Science/R_Projects/Customers_data.R', echo=TRUE)
data = read_csv('customers.csv')
data = read_csv('customers.csv')
source('~/GitHub/Data_Science/R_Projects/Customers_data.R', echo=TRUE)
source('~/GitHub/Data_Science/R_Projects/Customers_data.R', echo=TRUE)
setwd("~/GitHub/Data_Science/R_Projects")
data = cars,
aes(x = Cylinders,
y = Fuel.Economy)) +
geom_point() +
ggtitle("FUel Economy by Cylinders") +
xlab("Number of Cylinders") +
ylab("Fuel Economy (mpg)")
library(ggplot2)
cars <- read.csv("Cars.csv")
head(cars)
#create a frequency bar chart
ggplot(
data = cars,
aes(x = Transmission)) +
geom_bar() +
ggtitle("Count of Cars by Transmission Type") +
xlab("Transmission Type") +
ylab("Count")
head(cars)
#create histogram - distribution of fuel economy
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_histogram(bins = 20) +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Count of Cars")
#create a density plot
ggplot(
data = cars,
aes(x = Fuel.Economy)) +
geom_density() +
ggtitle("Distribution of Fuel Economy") +
xlab("Fuel Economy (mpg)") +
ylab("Density")
cars
#create a scatterplot
ggplot(
data = cars,
aes(x = Cylinders,
y = Fuel.Economy)) +
geom_point() +
ggtitle("FUel Economy by Cylinders") +
xlab("Number of Cylinders") +
ylab("Fuel Economy (mpg)")
cars
data = cars,
aes(x = Cylinders,
y = Fuel.Economy)) +
geom_point() +
ggtitle("Fuel Economy by Cylinders") +
xlab("Number of Cylinders") +
ylab("Fuel Economy (mpg)")
cars
#create a scatter plot
ggplot(
data = cars,
aes(x = Cylinders,
y = Fuel.Economy)) +
geom_point() +
ggtitle("Fuel Economy by Cylinders") +
xlab("Number of Cylinders") +
ylab("Fuel Economy (mpg)")
#simple linear regression
iris = read.csv('Iris.csv')
head(iris)
data(iris)
head(iris)
#create scatterplot of petal length and petal width
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#create linear regression model
#formula = y ~ x (y as a function of x)
model <- lm(
formula = Petal.Width ~ Petal.Length,
data = iris)
summary(model)
#draw the line on the graph
lines(
x = iris$Petal.Length,
y = model$fitted,
col = 'red',
lwd = 3
)
#get correlation coefficient
cor(
x = iris$Petal.Length,
y = iris$Petal.Width)
#Correlation is high so we can use it to predict new values
#predict new values
predict(
object = model,
newdata = data.frame(
Petal.Length = c(2, 5, 7)
)
)
###### HANDLING BIG DATA #######
install.packages("ff")
library(ff)
irisff <- read.table.ffdf(
file = "Iris.csv",
FUN = "read.csv"
)
class(irisff)
names(irisff)
#view first five rows
irisff[1:5,]
#install and load biglm
install.packages("biglm")
library(biglm)
#create linear regression model
model <- biglm(
formula = Petal.Width ~ Petal.Length,
data = irisff
)
#summarize the model
summary(model)
#create scatter plot
plot(
x = irisff$Petal.Length[],
y = irisff$Petal.Width[],
main = "Iris Petal Length vs Width",
xlab = "Petal Length",
ylab = "Petal Width"
)
#get y intercept from model
b <- summary(model)$mat[1,1]
#get slope from model
m <- summary(model)$mat[2,1]
#draw regression line
lines(
x = irisff$Petal.Length[],
y = m*irisff$Petal.Length[] + b.
col = 'red',
lwd = 3
)
#draw regression line
lines(
x = irisff$Petal.Length[],
y = m*irisff$Petal.Length[] + b,
col = 'red',
lwd = 3
)
#predict new values with the model
#not that a location for the calculated values must be created first
predict(
object = model,
newdata = data.frame(
Petal.Length = c(2, 5, 7),
Petal.Width = c(0, 0, 0)
)
)
data(iris)
#randomly sample 100 of 150 row indexes
indexes <- sample(
x = 1:150,
size = 100
)
print(indexes)
#assign the test and train set
train <- iris[indexes, ]
test <- iris[-indexes, ]
#load decision tree package
install.packages("tree")
library(tree)
#train a decision tree model
model <- tree(
formula = Species ~ .,  #dot includes all columns
data = train
)
summary(model)
text(model)
#visualize the model
plot(model)
text(model)
data(iris)
#set a random seed
set.seed(42)
#randomly sample 100 of 150 row indexes
#create an vector of 100 random index numbers
#from which we create the test and train sets
indexes <- sample(
x = 1:150,
size = 100
)
print(indexes)
#assign the test and train set
train <- iris[indexes, ]
test <- iris[-indexes, ]
#load decision tree package
install.packages("tree")
#train a decision tree model
model <- tree(
formula = Species ~ Petal.Length + Petal.Width,  #dot includes all columns
data = train
)
summary(model)
#visualize the model
plot(model)
text(model)
library(RColorBrewer)
#create a color palette
palette <- brewer.pal(3, "Set2")
#create scatter plot
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs Width",
xlab = "Petal Length",
ylab = "Petal Width"
)
#plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
#predict with the model
predictions <- predict(
object = model,
newdata = test,
type = "class"
)
#create a confusion matrix
table(
x = predictions,
y = test$Species
)
library(caret)
install.packages("caret")
library(caret)
#evaluate prediction results
confusionMatrix(
data = predictions,
reference = test$Species
)
install.packages("e1071")
library(e1071)
#evaluate prediction results
confusionMatrix(
data = predictions,
reference = test$Species
)
save(model, file = "Tree.RData")
library(shiny)
install.packages("shiny")
library(shiny)
#create the UI
ui <- fliudPage("Hello World!")
#create a server
server <- function(input, output) {}
#create the shiny app
shinyApp(ui = ui,
server = server)
library(shiny)
#create the UI
ui <- fliudPage("Hello World!")
#################################
#  CREATING A SHINY APP WITH R  #
#################################
install.packages("RTools")
#################################
#  CREATING A SHINY APP WITH R  #
#################################
install.packages("RTools40")
#################################
#  CREATING A SHINY APP WITH R  #
#################################
#install.packages("RTools40")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
#################################
#  CREATING A SHINY APP WITH R  #
#################################
#install.packages("RTools40")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
sys.which("make")
sys.which("make")
Sys.which("make")
"C:\\rtools40\\usr\\bin\\make.exe"
#################################
#  CREATING A SHINY APP WITH R  #
#################################
install.packages("RTools40")
#################################
#  CREATING A SHINY APP WITH R  #
#################################
install.packages("RTools40", type = "source")
